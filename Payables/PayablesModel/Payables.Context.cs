//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PayablesModel
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class PayablesEntities : DbContext
    {
        public PayablesEntities()
            : base("name=PayablesEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<GLAccount> GLAccounts { get; set; }
        public virtual DbSet<InvoiceLineItem> InvoiceLineItems { get; set; }
        public virtual DbSet<Invoice> Invoices { get; set; }
        public virtual DbSet<State> States { get; set; }
        public virtual DbSet<Term> Terms { get; set; }
        public virtual DbSet<Vendor> Vendors { get; set; }
    
        public virtual int spDeleteVendor(Nullable<int> vendorID, string name, string address1, string address2, string city, string state, string zipCode, string phone, string contactLName, string contactFName, Nullable<int> defaultTermsID, Nullable<int> defaultAccountNo)
        {
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var address1Parameter = address1 != null ?
                new ObjectParameter("Address1", address1) :
                new ObjectParameter("Address1", typeof(string));
    
            var address2Parameter = address2 != null ?
                new ObjectParameter("Address2", address2) :
                new ObjectParameter("Address2", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var zipCodeParameter = zipCode != null ?
                new ObjectParameter("ZipCode", zipCode) :
                new ObjectParameter("ZipCode", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var contactLNameParameter = contactLName != null ?
                new ObjectParameter("ContactLName", contactLName) :
                new ObjectParameter("ContactLName", typeof(string));
    
            var contactFNameParameter = contactFName != null ?
                new ObjectParameter("ContactFName", contactFName) :
                new ObjectParameter("ContactFName", typeof(string));
    
            var defaultTermsIDParameter = defaultTermsID.HasValue ?
                new ObjectParameter("DefaultTermsID", defaultTermsID) :
                new ObjectParameter("DefaultTermsID", typeof(int));
    
            var defaultAccountNoParameter = defaultAccountNo.HasValue ?
                new ObjectParameter("DefaultAccountNo", defaultAccountNo) :
                new ObjectParameter("DefaultAccountNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteVendor", vendorIDParameter, nameParameter, address1Parameter, address2Parameter, cityParameter, stateParameter, zipCodeParameter, phoneParameter, contactLNameParameter, contactFNameParameter, defaultTermsIDParameter, defaultAccountNoParameter);
        }
    
        public virtual ObjectResult<spGetInvoicesDue_Result> spGetInvoicesDue()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetInvoicesDue_Result>("spGetInvoicesDue");
        }
    
        public virtual ObjectResult<spGetVendor_Result> spGetVendor(Nullable<int> vendorID)
        {
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetVendor_Result>("spGetVendor", vendorIDParameter);
        }
    
        public virtual ObjectResult<spGetVendorAddress_Result> spGetVendorAddress(Nullable<int> vendorID)
        {
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetVendorAddress_Result>("spGetVendorAddress", vendorIDParameter);
        }
    
        public virtual int spInsertVendor(ObjectParameter vendorID, string name, string address1, string address2, string city, string state, string zipCode, string phone, string contactLName, string contactFName, Nullable<int> defaultTermsID, Nullable<int> defaultAccountNo)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var address1Parameter = address1 != null ?
                new ObjectParameter("Address1", address1) :
                new ObjectParameter("Address1", typeof(string));
    
            var address2Parameter = address2 != null ?
                new ObjectParameter("Address2", address2) :
                new ObjectParameter("Address2", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var zipCodeParameter = zipCode != null ?
                new ObjectParameter("ZipCode", zipCode) :
                new ObjectParameter("ZipCode", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var contactLNameParameter = contactLName != null ?
                new ObjectParameter("ContactLName", contactLName) :
                new ObjectParameter("ContactLName", typeof(string));
    
            var contactFNameParameter = contactFName != null ?
                new ObjectParameter("ContactFName", contactFName) :
                new ObjectParameter("ContactFName", typeof(string));
    
            var defaultTermsIDParameter = defaultTermsID.HasValue ?
                new ObjectParameter("DefaultTermsID", defaultTermsID) :
                new ObjectParameter("DefaultTermsID", typeof(int));
    
            var defaultAccountNoParameter = defaultAccountNo.HasValue ?
                new ObjectParameter("DefaultAccountNo", defaultAccountNo) :
                new ObjectParameter("DefaultAccountNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertVendor", vendorID, nameParameter, address1Parameter, address2Parameter, cityParameter, stateParameter, zipCodeParameter, phoneParameter, contactLNameParameter, contactFNameParameter, defaultTermsIDParameter, defaultAccountNoParameter);
        }
    
        public virtual int spUpdateVendor(string name, string address1, string address2, string city, string state, string zipCode, string phone, string contactLName, string contactFName, Nullable<int> defaultTermsID, Nullable<int> defaultAccountNo, Nullable<int> original_VendorID, string original_Name, string original_Address1, string original_Address2, string original_City, string original_State, string original_ZipCode, string original_Phone, string original_ContactLName, string original_ContactFName, Nullable<int> original_DefaultTermsID, Nullable<int> original_DefaultAccountNo)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var address1Parameter = address1 != null ?
                new ObjectParameter("Address1", address1) :
                new ObjectParameter("Address1", typeof(string));
    
            var address2Parameter = address2 != null ?
                new ObjectParameter("Address2", address2) :
                new ObjectParameter("Address2", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var zipCodeParameter = zipCode != null ?
                new ObjectParameter("ZipCode", zipCode) :
                new ObjectParameter("ZipCode", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var contactLNameParameter = contactLName != null ?
                new ObjectParameter("ContactLName", contactLName) :
                new ObjectParameter("ContactLName", typeof(string));
    
            var contactFNameParameter = contactFName != null ?
                new ObjectParameter("ContactFName", contactFName) :
                new ObjectParameter("ContactFName", typeof(string));
    
            var defaultTermsIDParameter = defaultTermsID.HasValue ?
                new ObjectParameter("DefaultTermsID", defaultTermsID) :
                new ObjectParameter("DefaultTermsID", typeof(int));
    
            var defaultAccountNoParameter = defaultAccountNo.HasValue ?
                new ObjectParameter("DefaultAccountNo", defaultAccountNo) :
                new ObjectParameter("DefaultAccountNo", typeof(int));
    
            var original_VendorIDParameter = original_VendorID.HasValue ?
                new ObjectParameter("original_VendorID", original_VendorID) :
                new ObjectParameter("original_VendorID", typeof(int));
    
            var original_NameParameter = original_Name != null ?
                new ObjectParameter("original_Name", original_Name) :
                new ObjectParameter("original_Name", typeof(string));
    
            var original_Address1Parameter = original_Address1 != null ?
                new ObjectParameter("original_Address1", original_Address1) :
                new ObjectParameter("original_Address1", typeof(string));
    
            var original_Address2Parameter = original_Address2 != null ?
                new ObjectParameter("original_Address2", original_Address2) :
                new ObjectParameter("original_Address2", typeof(string));
    
            var original_CityParameter = original_City != null ?
                new ObjectParameter("original_City", original_City) :
                new ObjectParameter("original_City", typeof(string));
    
            var original_StateParameter = original_State != null ?
                new ObjectParameter("original_State", original_State) :
                new ObjectParameter("original_State", typeof(string));
    
            var original_ZipCodeParameter = original_ZipCode != null ?
                new ObjectParameter("original_ZipCode", original_ZipCode) :
                new ObjectParameter("original_ZipCode", typeof(string));
    
            var original_PhoneParameter = original_Phone != null ?
                new ObjectParameter("original_Phone", original_Phone) :
                new ObjectParameter("original_Phone", typeof(string));
    
            var original_ContactLNameParameter = original_ContactLName != null ?
                new ObjectParameter("original_ContactLName", original_ContactLName) :
                new ObjectParameter("original_ContactLName", typeof(string));
    
            var original_ContactFNameParameter = original_ContactFName != null ?
                new ObjectParameter("original_ContactFName", original_ContactFName) :
                new ObjectParameter("original_ContactFName", typeof(string));
    
            var original_DefaultTermsIDParameter = original_DefaultTermsID.HasValue ?
                new ObjectParameter("original_DefaultTermsID", original_DefaultTermsID) :
                new ObjectParameter("original_DefaultTermsID", typeof(int));
    
            var original_DefaultAccountNoParameter = original_DefaultAccountNo.HasValue ?
                new ObjectParameter("original_DefaultAccountNo", original_DefaultAccountNo) :
                new ObjectParameter("original_DefaultAccountNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateVendor", nameParameter, address1Parameter, address2Parameter, cityParameter, stateParameter, zipCodeParameter, phoneParameter, contactLNameParameter, contactFNameParameter, defaultTermsIDParameter, defaultAccountNoParameter, original_VendorIDParameter, original_NameParameter, original_Address1Parameter, original_Address2Parameter, original_CityParameter, original_StateParameter, original_ZipCodeParameter, original_PhoneParameter, original_ContactLNameParameter, original_ContactFNameParameter, original_DefaultTermsIDParameter, original_DefaultAccountNoParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> spVendorBalance(Nullable<int> vendorID)
        {
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("spVendorBalance", vendorIDParameter);
        }
    
        public virtual ObjectResult<spVendorInvoices_Result> spVendorInvoices(Nullable<int> vendorID)
        {
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spVendorInvoices_Result>("spVendorInvoices", vendorIDParameter);
        }
    }
}
